package com.nandi.gsgdsecond.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nandi.gsgdsecond.bean.MonitorPoint;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MONITOR_POINT".
*/
public class MonitorPointDao extends AbstractDao<MonitorPoint, Long> {

    public static final String TABLENAME = "MONITOR_POINT";

    /**
     * Properties of entity MonitorPoint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property DisasterNumber = new Property(2, String.class, "disasterNumber", false, "DISASTER_NUMBER");
        public final static Property MonitorNumber = new Property(3, String.class, "monitorNumber", false, "MONITOR_NUMBER");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Dimension = new Property(5, String.class, "dimension", false, "DIMENSION");
        public final static Property MonitorType = new Property(6, String.class, "monitorType", false, "MONITOR_TYPE");
    }


    public MonitorPointDao(DaoConfig config) {
        super(config);
    }
    
    public MonitorPointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MONITOR_POINT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"DISASTER_NUMBER\" TEXT," + // 2: disasterNumber
                "\"MONITOR_NUMBER\" TEXT," + // 3: monitorNumber
                "\"TYPE\" TEXT," + // 4: type
                "\"DIMENSION\" TEXT," + // 5: dimension
                "\"MONITOR_TYPE\" TEXT);"); // 6: monitorType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MONITOR_POINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MonitorPoint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String disasterNumber = entity.getDisasterNumber();
        if (disasterNumber != null) {
            stmt.bindString(3, disasterNumber);
        }
 
        String monitorNumber = entity.getMonitorNumber();
        if (monitorNumber != null) {
            stmt.bindString(4, monitorNumber);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String dimension = entity.getDimension();
        if (dimension != null) {
            stmt.bindString(6, dimension);
        }
 
        String monitorType = entity.getMonitorType();
        if (monitorType != null) {
            stmt.bindString(7, monitorType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MonitorPoint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String disasterNumber = entity.getDisasterNumber();
        if (disasterNumber != null) {
            stmt.bindString(3, disasterNumber);
        }
 
        String monitorNumber = entity.getMonitorNumber();
        if (monitorNumber != null) {
            stmt.bindString(4, monitorNumber);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String dimension = entity.getDimension();
        if (dimension != null) {
            stmt.bindString(6, dimension);
        }
 
        String monitorType = entity.getMonitorType();
        if (monitorType != null) {
            stmt.bindString(7, monitorType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MonitorPoint readEntity(Cursor cursor, int offset) {
        MonitorPoint entity = new MonitorPoint( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // disasterNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // monitorNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dimension
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // monitorType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MonitorPoint entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDisasterNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMonitorNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDimension(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMonitorType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MonitorPoint entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MonitorPoint entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MonitorPoint entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
