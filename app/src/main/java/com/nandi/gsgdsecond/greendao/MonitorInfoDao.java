package com.nandi.gsgdsecond.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nandi.gsgdsecond.bean.MonitorInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MONITOR_INFO".
*/
public class MonitorInfoDao extends AbstractDao<MonitorInfo, Long> {

    public static final String TABLENAME = "MONITOR_INFO";

    /**
     * Properties of entity MonitorInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DisasterName = new Property(1, String.class, "disasterName", false, "DISASTER_NAME");
        public final static Property MonitorName = new Property(2, String.class, "monitorName", false, "MONITOR_NAME");
        public final static Property DisasterNumber = new Property(3, String.class, "disasterNumber", false, "DISASTER_NUMBER");
        public final static Property MonitorNumber = new Property(4, String.class, "monitorNumber", false, "MONITOR_NUMBER");
        public final static Property CrackLength = new Property(5, String.class, "crackLength", false, "CRACK_LENGTH");
        public final static Property HappenTime = new Property(6, String.class, "happenTime", false, "HAPPEN_TIME");
        public final static Property PhotoPath = new Property(7, String.class, "photoPath", false, "PHOTO_PATH");
        public final static Property Longitude = new Property(8, String.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(9, String.class, "latitude", false, "LATITUDE");
    }


    public MonitorInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MonitorInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MONITOR_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DISASTER_NAME\" TEXT," + // 1: disasterName
                "\"MONITOR_NAME\" TEXT," + // 2: monitorName
                "\"DISASTER_NUMBER\" TEXT," + // 3: disasterNumber
                "\"MONITOR_NUMBER\" TEXT," + // 4: monitorNumber
                "\"CRACK_LENGTH\" TEXT," + // 5: crackLength
                "\"HAPPEN_TIME\" TEXT," + // 6: happenTime
                "\"PHOTO_PATH\" TEXT," + // 7: photoPath
                "\"LONGITUDE\" TEXT," + // 8: longitude
                "\"LATITUDE\" TEXT);"); // 9: latitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MONITOR_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MonitorInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String disasterName = entity.getDisasterName();
        if (disasterName != null) {
            stmt.bindString(2, disasterName);
        }
 
        String monitorName = entity.getMonitorName();
        if (monitorName != null) {
            stmt.bindString(3, monitorName);
        }
 
        String disasterNumber = entity.getDisasterNumber();
        if (disasterNumber != null) {
            stmt.bindString(4, disasterNumber);
        }
 
        String monitorNumber = entity.getMonitorNumber();
        if (monitorNumber != null) {
            stmt.bindString(5, monitorNumber);
        }
 
        String crackLength = entity.getCrackLength();
        if (crackLength != null) {
            stmt.bindString(6, crackLength);
        }
 
        String happenTime = entity.getHappenTime();
        if (happenTime != null) {
            stmt.bindString(7, happenTime);
        }
 
        String photoPath = entity.getPhotoPath();
        if (photoPath != null) {
            stmt.bindString(8, photoPath);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(9, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(10, latitude);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MonitorInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String disasterName = entity.getDisasterName();
        if (disasterName != null) {
            stmt.bindString(2, disasterName);
        }
 
        String monitorName = entity.getMonitorName();
        if (monitorName != null) {
            stmt.bindString(3, monitorName);
        }
 
        String disasterNumber = entity.getDisasterNumber();
        if (disasterNumber != null) {
            stmt.bindString(4, disasterNumber);
        }
 
        String monitorNumber = entity.getMonitorNumber();
        if (monitorNumber != null) {
            stmt.bindString(5, monitorNumber);
        }
 
        String crackLength = entity.getCrackLength();
        if (crackLength != null) {
            stmt.bindString(6, crackLength);
        }
 
        String happenTime = entity.getHappenTime();
        if (happenTime != null) {
            stmt.bindString(7, happenTime);
        }
 
        String photoPath = entity.getPhotoPath();
        if (photoPath != null) {
            stmt.bindString(8, photoPath);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(9, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(10, latitude);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MonitorInfo readEntity(Cursor cursor, int offset) {
        MonitorInfo entity = new MonitorInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // disasterName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // monitorName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // disasterNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // monitorNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // crackLength
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // happenTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // photoPath
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // longitude
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // latitude
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MonitorInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDisasterName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMonitorName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDisasterNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMonitorNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCrackLength(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHappenTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhotoPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLongitude(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLatitude(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MonitorInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MonitorInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MonitorInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
